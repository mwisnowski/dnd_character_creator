v 1.00.00 
06/27/2025
Branch: main
- Began project
- Created general outline of fileand folder structure
- Began outline of species details
- Added template.pdf to use after the character is created

v 1.00.00
06/30/2025
Branch: main
- Added remaining species details
- Created utility function to pull, interpret, and present species information from the species dictionaries
- Tied this back to main.py to allow reading of species data. Will later be used to determine species used in character creation

v 1.00.01
06/30/2025
Branch: main
- Added skeletal structure for remainder of steps (i.e. classes, equipment, etc...)

v 1.00.02
06/30/2025
Branch: main
- Added logic for dice rolling and setting ability scores
- Began character creation, including framework for selecting background, classs, species, and ability scores

v 1.00.02
06/30/2025
Branch: main
- Added background information and selection

v 1.00.03
07/01/2025
Branch: main
- Implemented unified ability and skill score display with proficiency marks
- Added logic for skill proficiency selection from traits (Keen Senses, Skillful) with user prompts
- Skill scores will show (X) for proficient skills in character sheet
- Improved trait handling and display for species selection, including lineage/ancestry
- Added menu-driven class selection using InquirerPy, with prettytable class progression display
- Modularized class selection logic for future class expansion
- Added Weapon and Armor dictionaries for later use

v 1.00.04
07/01/2025
Branch: main
- Added Bard class information
- Implemented equipment and inventory management features, grabbing what's granted by both the class and background
- Added spell databases up through third-level, using per-level modules (cantrips, level1, level2, level3) instead of a single spells_dict.py file
- spells_dict.py removed as a result
- Improved spell display formatting for user-friendly output

v 1.00.05
07/02/2025
Branch: main
- Project-wide code hygiene and documentation improvements:
  - Added or standardized module-level docstrings for all major Python modules (excluding dictionary-only or empty files)
  - Cleaned up and grouped imports, removing unused imports
  - Clarified and standardized function and class docstrings throughout the codebase
  - Improved helper function naming and documentation for clarity
  - No changes made to dictionary-only or empty modules
- Refactored ability, skill, and spell logic for clarity and maintainability
- Ensured all user prompts and spell/ability handling are robust and modular

v 1.00.06
07/02/2025
Branch: classes_work
- Major refactor and documentation improvements for class selection and related logic:
  - Broke up monolithic class selection into focused helper functions with detailed docstrings
  - Made class and spellcasting tables dynamic and user-friendly
  - Ensured declining a class returns to the selection menu
  - Improved equipment and inventory management logic
  - Clarified and standardized function and class docstrings throughout the codebase, especially in class selection
  - Improved helper function naming and documentation for clarity
- Refactored and modularized class, ability, skill, and spell logic for clarity and maintainability

v 1.00.07
07/02/2025
Branch: spells_work
- Overhauled spell learning and class selection workflow for modularity and user experience:
  - Spell selection now supports learning multiple spells per level, as dictated by the class's spellcasting table.
  - Users can select spells from any available spell level, and the system prevents duplicate selections.
  - All selected spells are correctly stored and displayed in the character sheet, organized by level.
  - Refactored spell learning logic to loop for all required cantrips and leveled spells, using the [CLASS]_LEVELS table.
  - Fixed known_spells handling to support multiple spells and ensure proper display at the end of character creation.
- General improvements to code modularity, maintainability, and error handling in the class and spell selection modules.

v 1.00.08
07/02/2025
Branch: classes_work
- Unified and robust proficiency handling across class, background, and species:
  - All sources now return a structured proficiencies dict (weapons, armor, tools), which is merged and deduplicated in character creation.
  - Character sheet displays all proficiencies, with weapon types categorized using the weapon dictionaries.
- Cleric class added
- General improvements:
  - Passing and merging of proficiencies from all sources is now robust and future-proof.
  - All class/domain/feature-based proficiencies and spell choices are now correctly reflected in the character sheet.
  - Refactored code for clarity and maintainability in class_utils and character_creation.

v 1.00.09
07/03/2025
Branch: classes_work
- Druid class and subclasses added and standardized, with full feature and progression tables, type hints, and documentation.
- Fighter class and subclasses added and standardized, with full feature and progression tables, type hints, and documentation.
- Bard, Barbarian, and Cleric class data further standardized for consistency (type hints, docstrings, formatting, and feature structure).
- Skeletal struction for remaining classes added to easily build off of
- Interactive class feature browser added: rich formatting, navigation, and tree-like back navigation; supports dict/list/string features and renders tables for complex features.
  - Feature browser will detect subclass features ("Subclass Feature" or any feature ending with "Subclass").
- Proficiency handling and marking further unified and clarified for equipment, skills, and saving throws; all sources (class, background, species) now merge into a robust, deduplicated structure.
- Spellcasting ability, modifer, and save DC calcuation added with atuomatic detection from feature descriptions.
- General improvements to code modularity, maintainability, and user experience in class browsing, feature display, and character sheet output.

